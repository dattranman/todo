// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	schema "github.com/dattranman/todo/model/schema"
	mock "github.com/stretchr/testify/mock"
)

// TaskStore is an autogenerated mock type for the TaskStore type
type TaskStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: task
func (_m *TaskStore) Create(task *schema.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(*schema.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *TaskStore) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *TaskStore) GetByID(id string) (schema.Task, error) {
	ret := _m.Called(id)

	var r0 schema.Task
	if rf, ok := ret.Get(0).(func(string) schema.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(schema.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ids
func (_m *TaskStore) GetByIDs(ids []string) ([]schema.Task, error) {
	ret := _m.Called(ids)

	var r0 []schema.Task
	if rf, ok := ret.Get(0).(func([]string) []schema.Task); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields:
func (_m *TaskStore) GetList() ([]schema.Task, int64, error) {
	ret := _m.Called()

	var r0 []schema.Task
	if rf, ok := ret.Get(0).(func() []schema.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Task)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: task
func (_m *TaskStore) Update(task *schema.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(*schema.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTaskStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskStore creates a new instance of TaskStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskStore(t mockConstructorTestingTNewTaskStore) *TaskStore {
	mock := &TaskStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
